AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-python-learning

  Sample SAM Template for sam-python-learning

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: python3.12
    Architectures:
      - x86_64
    Timeout: 10

    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
Resources:
  # 認可レイヤー
  AuthLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: auth-layer
      ContentUri: layers/auth_layer/
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: Retain

  # テンプレート関数
  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: hello_world/
      Handler: app.lambda_handler
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get

  # SecretsManager
  JwtSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: jwt-secret
      Description: Secret for JWT token signing key

  # 認証用のLambda関数
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/auth/
      Handler: app.lambda_handler
      Environment:
        Variables:
          JWT_SECRET_ARN: !Ref JwtSecret
          JWT_SECRET:
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref JwtSecret
      Events:
        AuthApi:
          Type: Api
          Properties:
            Path: /auth/login
            Method: post

  # 認可用のLambda関数
  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/users/
      Handler: app.lambda_handler
      Layers:
        - !Ref AuthLayer
      Environment:
        Variables:
          JWT_SECRET_ARN: !Ref JwtSecret
          JWT_SECRET:
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref JwtSecret
      Events:
        UsersApi:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: get

  # DSQL初期化用のLambda関数
  DsqlInitFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/dsql_init/
      Handler: app.lambda_handler
      Timeout: 60
      Events:
        AuthApi:
          Type: Api
          Properties:
            Path: /dsql/init
            Method: post

  # DSQL登録用のLambda関数
  DsqlInsertFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/dsql_insert/
      Handler: app.lambda_handler
      Timeout: 60
      Events:
        AuthApi:
          Type: Api
          Properties:
            Path: /dsql/insert
            Method: post

  # DSQL削除用のLambda関数
  DsqlDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/dsql_delete/
      Handler: app.lambda_handler
      Timeout: 60
      Events:
        AuthApi:
          Type: Api
          Properties:
            Path: /dsql/delete
            Method: delete

  # DSQL検索用のLambda関数
  DsqlSelectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/dsql_select/
      Handler: app.lambda_handler
      Timeout: 60
      Events:
        AuthApi:
          Type: Api
          Properties:
            Path: /dsql/select
            Method: get

  # DSQL更新用のLambda関数
  DsqlUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/dsql_update/
      Handler: app.lambda_handler
      Timeout: 60
      Events:
        AuthApi:
          Type: Api
          Properties:
            Path: /dsql/update
            Method: put

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: API Gateway endpoint URL for Prod stage for Hello World
      function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt HelloWorldFunctionRole.Arn
  ApiUrl:
    Description: "API Gateway endpoint"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com"
